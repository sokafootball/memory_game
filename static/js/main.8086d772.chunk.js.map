{"version":3,"sources":["Card.js","Game.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","status","style","backgroundColor","color","react_default","a","createElement","className","onClick","handleCardClick","id","defaultProps","Game","myCards","cards","map","c","index","Card_Card","Object","assign","key","console","log","Navbar","newGame","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","countShowingCards","showingCards","state","forEach","card","setState","compareCards","showCard","clickedCard","newCards","slice","filter","comparedCards","isMatch","setTimeout","newCard","some","shuffleCards","i","length","j","Math","floor","random","_ref","bind","assertThisInitialized","Navbar_Navbar","Game_Game","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8086d772.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\nconst Card = (props) => {\n\nif(props.status !== 'hidden'){\n  var style = {\n    backgroundColor: props.color\n  }\n}\n\n  return (\n    <div className=\"card\" style={style} onClick={() => props.handleCardClick(props.id)}></div>\n  )\n}\n\nCard.defaultProps = {\n  id: '99',\n  status: 'hidden',\n  color: 'grey'\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired\n}\n\nexport {Card}\n","import React from 'react'\nimport {Card} from './Card'\n// import './Game.css'\nimport PropTypes from 'prop-types'\n\nconst Game = (props) => {\n  const myCards = props.cards.map((c, index) => {\n    return <Card {...c} key={index} handleCardClick = {props.handleCardClick}/>\n  })\n    return (\n      <div className=\"cardsDiv\">\n        {myCards}\n      </div>\n    )\n}\n\nGame.defaultProps = {\n  handleCardClick: () => {console.log('handleCardClick function not provided')},\n  cards: () => [\n    {id: 0, color: 'black', status: 'showing'},\n    {id: 1, color: 'black', status: 'showing'},\n    {id: 2, color: 'black', status: 'showing'},\n    {id: 3, color: 'black', status: 'showing'},\n    {id: 4, color: 'black', status: 'showing'},\n    {id: 5, color: 'black', status: 'showing'},\n    {id: 6, color: 'black', status: 'showing'},\n    {id: 7, color: 'black', status: 'showing'},\n    {id: 8, color: 'black', status: 'showing'},\n    {id: 9, color: 'black', status: 'showing'},\n    {id: 10, color: 'black', status: 'showing'},\n    {id: 11, color: 'black', status: 'showing'},\n    {id: 12, color: 'black', status: 'showing'},\n    {id: 13, color: 'black', status: 'showing'},\n    {id: 14, color: 'black', status: 'showing'},\n    {id: 15, color: 'black', status: 'showing'}\n  ]\n}\n\nGame.propTypes = {\n  handleCardClick: PropTypes.func.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n\nexport {Game}\n","import React from 'react'\nimport './Navbar.css'\nimport PropTypes from 'prop-types'\n\nconst Navbar = (props) => {\n    return (\n      <div className='mainBar'>\n        <h1>Memory Game</h1>\n        <h3 onClick={props.newGame}>New Game</h3>\n      </div>\n    )\n}\n\nNavbar.defaultProps = {\n  newGame: () => {console.log('from Navbar: newGame function not provided')}\n}\n\nNavbar.propTypes = {\n  newGame: PropTypes.func.isRequired\n}\n\nexport {Navbar}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Game} from './Game'\nimport {Navbar} from './Navbar'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cards: [\n        {id: 0, color: 'red', status: 'hidden'},\n        {id: 1, color: 'red', status: 'hidden'},\n        {id: 2, color: 'blue', status: 'hidden'},\n        {id: 3, color: 'blue', status: 'hidden'},\n        {id: 4, color: 'yellow', status: 'hidden'},\n        {id: 5, color: 'yellow', status: 'hidden'},\n        {id: 6, color: 'black', status: 'hidden'},\n        {id: 7, color: 'black', status: 'hidden'},\n        {id: 8, color: 'pink', status: 'hidden'},\n        {id: 9, color: 'pink', status: 'hidden'},\n        {id: 10, color: 'green', status: 'hidden'},\n        {id: 11, color: 'green', status: 'hidden'},\n        {id: 12, color: 'orange', status: 'hidden'},\n        {id: 13, color: 'orange', status: 'hidden'},\n        {id: 14, color: 'purple', status: 'hidden'},\n        {id: 15, color: 'purple', status: 'hidden'}\n      ],\n      showingCards: 0\n    }\n    this.handleCardClick = this.handleCardClick.bind(this)\n    this.newGame = this.newGame.bind(this)\n  }\n\n  componentDidMount(){\n    this.shuffleCards()\n  }\n\n  countShowingCards = () => {\n    console.log('countShowingCards called')\n    let showingCards = 0\n    this.state.cards.forEach(card => {if(card.status === 'showing')showingCards++})\n    this.setState({showingCards}, () => {\n      console.log(this.state.showingCards)\n      if(this.state.showingCards === 2){\n        this.compareCards()\n      }\n    })\n  }\n\n  showCard = (clickedCard, id) => {\n    console.log('showCard called')\n    if(clickedCard.status === 'hidden' && this.state.showingCards < 2){\n      clickedCard.status = 'showing'\n      let newCards = this.state.cards.slice()\n      newCards = newCards.map(card => (card.id === id ? clickedCard : card))\n      this.setState({cards: newCards}, this.countShowingCards)\n      }\n    }\n\n  handleCardClick = (id) => {\n    console.log('button clicked')\n    const clickedCard = this.state.cards.filter((card) => card.id === id)[0]\n    this.showCard(clickedCard, id)\n  }\n\n  compareCards = () => {\n    console.log('compareCards called')\n    let comparedCards = this.state.cards.filter((card) => card.status === 'showing')\n    const isMatch = comparedCards[0].color === comparedCards[1].color\n    setTimeout(() => {\n      comparedCards.forEach(card => {isMatch ? card.status = 'matched' : card.status = 'hidden'})\n      let newCards = this.state.cards.slice()\n      newCards = newCards.map(newCard => {\n        if(comparedCards.some(card => card.id === newCard.id)){\n          isMatch ? newCard.status = 'matched' : newCard.status = 'hidden'\n        }\n        return newCard\n      })\n      this.setState({newCards, showingCards:0})\n    }, 1000)\n  }\n\n  shuffleCards = () => {\n    console.log('ShuffleCards called')\n    let myCards = this.state.cards.slice()\n    for (let i = myCards.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [myCards[i], myCards[j]] = [myCards[j], myCards[i]];\n    }\n    this.setState({cards: myCards}, console.log(this.state.cards))\n  }\n\n  newGame = () => {\n    //shuffle cards\n    setTimeout(this.shuffleCards, 50)    //set all cards to hidden and showing cards to 0\n    let myCards = this.state.cards.slice()\n    myCards.forEach(card => card.status = 'hidden')\n    this.setState({cards: myCards, showingCards: 0})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n        newGame={this.newGame}\n        />\n        <Game\n        cards={this.state.cards}\n        handleCardClick={this.handleCardClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}